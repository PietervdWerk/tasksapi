// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	. "github.com/pietervdwerk/tasksapi/pkg/openapi3"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request)
	// Create a new task
	// (POST /tasks)
	PostTasks(w http.ResponseWriter, r *http.Request)
	// Delete a task
	// (DELETE /tasks/{taskId})
	DeleteTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId)
	// Get a task by ID
	// (GET /tasks/{taskId})
	GetTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId)
	// Update a task
	// (PUT /tasks/{taskId})
	PutTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId)
	// Get an access token
	// (POST /token)
	PostToken(w http.ResponseWriter, r *http.Request, params PostTokenParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all tasks
// (GET /tasks)
func (_ Unimplemented) GetTasks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task
// (POST /tasks)
func (_ Unimplemented) PostTasks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a task
// (DELETE /tasks/{taskId})
func (_ Unimplemented) DeleteTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task by ID
// (GET /tasks/{taskId})
func (_ Unimplemented) GetTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a task
// (PUT /tasks/{taskId})
func (_ Unimplemented) PutTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an access token
// (POST /token)
func (_ Unimplemented) PostToken(w http.ResponseWriter, r *http.Request, params PostTokenParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostTasks operation middleware
func (siw *ServerInterfaceWrapper) PostTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTasks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTasksTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) GetTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasksTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) PutTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutTasksTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostToken operation middleware
func (siw *ServerInterfaceWrapper) PostToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTokenParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostToken(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks", wrapper.GetTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tasks", wrapper.PostTasks)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tasks/{taskId}", wrapper.DeleteTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{taskId}", wrapper.GetTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tasks/{taskId}", wrapper.PutTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token", wrapper.PostToken)
	})

	return r
}

type GetTasksRequestObject struct {
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse []Task

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks400JSONResponse Error

func (response PostTasks400JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksTaskIdRequestObject struct {
	TaskId TaskId `json:"taskId"`
}

type DeleteTasksTaskIdResponseObject interface {
	VisitDeleteTasksTaskIdResponse(w http.ResponseWriter) error
}

type DeleteTasksTaskId204Response struct {
}

func (response DeleteTasksTaskId204Response) VisitDeleteTasksTaskIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasksTaskId400JSONResponse Error

func (response DeleteTasksTaskId400JSONResponse) VisitDeleteTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksTaskId404JSONResponse Error

func (response DeleteTasksTaskId404JSONResponse) VisitDeleteTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksTaskIdRequestObject struct {
	TaskId TaskId `json:"taskId"`
}

type GetTasksTaskIdResponseObject interface {
	VisitGetTasksTaskIdResponse(w http.ResponseWriter) error
}

type GetTasksTaskId200JSONResponse Task

func (response GetTasksTaskId200JSONResponse) VisitGetTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksTaskId400JSONResponse Error

func (response GetTasksTaskId400JSONResponse) VisitGetTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksTaskId404JSONResponse Error

func (response GetTasksTaskId404JSONResponse) VisitGetTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksTaskIdRequestObject struct {
	TaskId TaskId `json:"taskId"`
	Body   *PutTasksTaskIdJSONRequestBody
}

type PutTasksTaskIdResponseObject interface {
	VisitPutTasksTaskIdResponse(w http.ResponseWriter) error
}

type PutTasksTaskId200JSONResponse Task

func (response PutTasksTaskId200JSONResponse) VisitPutTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksTaskId400JSONResponse Error

func (response PutTasksTaskId400JSONResponse) VisitPutTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksTaskId404JSONResponse Error

func (response PutTasksTaskId404JSONResponse) VisitPutTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostTokenRequestObject struct {
	Params PostTokenParams
	Body   *PostTokenJSONRequestBody
}

type PostTokenResponseObject interface {
	VisitPostTokenResponse(w http.ResponseWriter) error
}

type PostToken200JSONResponse struct {
	// AccessToken A newly issued access token for the flow
	AccessToken string `json:"access_token"`

	// ExpiresIn The time to live of the access token in seconds
	ExpiresIn int `json:"expires_in"`

	// Scope Space separated string of issued scopes. If not present, the requested scopes were issued. If present, the issued scopes may differ from the requested scopes.
	Scope     *string   `json:"scope,omitempty"`
	TokenType TokenType `json:"token_type"`
}

func (response PostToken200JSONResponse) VisitPostTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostToken400JSONResponse Error

func (response PostToken400JSONResponse) VisitPostTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostToken401JSONResponse Error

func (response PostToken401JSONResponse) VisitPostTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete a task
	// (DELETE /tasks/{taskId})
	DeleteTasksTaskId(ctx context.Context, request DeleteTasksTaskIdRequestObject) (DeleteTasksTaskIdResponseObject, error)
	// Get a task by ID
	// (GET /tasks/{taskId})
	GetTasksTaskId(ctx context.Context, request GetTasksTaskIdRequestObject) (GetTasksTaskIdResponseObject, error)
	// Update a task
	// (PUT /tasks/{taskId})
	PutTasksTaskId(ctx context.Context, request PutTasksTaskIdRequestObject) (PutTasksTaskIdResponseObject, error)
	// Get an access token
	// (POST /token)
	PostToken(ctx context.Context, request PostTokenRequestObject) (PostTokenResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(w http.ResponseWriter, r *http.Request) {
	var request GetTasksRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx, request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		if err := validResponse.VisitGetTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(w http.ResponseWriter, r *http.Request) {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx, request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		if err := validResponse.VisitPostTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTasksTaskId operation middleware
func (sh *strictHandler) DeleteTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId) {
	var request DeleteTasksTaskIdRequestObject

	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksTaskId(ctx, request.(DeleteTasksTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksTaskId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTasksTaskIdResponseObject); ok {
		if err := validResponse.VisitDeleteTasksTaskIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTasksTaskId operation middleware
func (sh *strictHandler) GetTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId) {
	var request GetTasksTaskIdRequestObject

	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasksTaskId(ctx, request.(GetTasksTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasksTaskId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTasksTaskIdResponseObject); ok {
		if err := validResponse.VisitGetTasksTaskIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutTasksTaskId operation middleware
func (sh *strictHandler) PutTasksTaskId(w http.ResponseWriter, r *http.Request, taskId TaskId) {
	var request PutTasksTaskIdRequestObject

	request.TaskId = taskId

	var body PutTasksTaskIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutTasksTaskId(ctx, request.(PutTasksTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTasksTaskId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutTasksTaskIdResponseObject); ok {
		if err := validResponse.VisitPutTasksTaskIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostToken operation middleware
func (sh *strictHandler) PostToken(w http.ResponseWriter, r *http.Request, params PostTokenParams) {
	var request PostTokenRequestObject

	request.Params = params

	var body PostTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostToken(ctx, request.(PostTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTokenResponseObject); ok {
		if err := validResponse.VisitPostTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTXPbNhD9Kztoj4wltz7p5o82o5m0zdTKKePxIMRSQkwCCLCMo3r43ztYUKIoUnLd",
	"2G0OufFjF7vvvcVi8SByWzlr0FAQswfhpJcVEnp+Ixnu5io+aSNmwklaiUwYWaGYbX5mwuOnWntUYka+",
	"xkyEfIWVjF6F9ZUkMRN1raMlrV30DOS1WYqmaTbGHO3SoyT8w79zShIuZLj7Ez/VGIgT89ahJ41sqjDk",
	"XjvS1sTXSps3aJa0ErPTQZRMBJJUs9+PHgsxEz9MOtSTNoNJDHidLJtMkKYSH1272UX/vnXKeultw99s",
	"ve2Hj5hTjPKL99YP4VUYglxy+OMBN4Zja0c8w6VzJlmdU0+fSPgr0hWKEfr2yB781+pxrTPx5dXSvmpL",
	"Z3711bIMsqi5ap4AbI/KlPQxAbMd8nbjHSL/eosPTV3FGA6NSmxEoCUSqh3vDsvC3qFZ8NfO+QKlRz9i",
	"H5FoU1imJfHD8eE3aeQSKzQE52/nIhOf0QdWUZyeTE+mMZR1aKTTYiZ+5k8Z73LOehJ3OD8tkVmNdSQj",
	"J7EniNdICzaIPAZnTUgV9tN0yoVmDaFhP+lcqXP2nHwMqYq6JqEJq39UBax/gi69l+uEvFed4rrOcwyh",
	"qEvYJMVKh7qqpF+LmXijA4EsS6A2eZLLEPlNYG6aTDgbRvC+tWEHMDemC6vWT8J6DOLh9tf0azV22WZA",
	"+umzJZK4HnKbElRRhrMnanwsXOqBI/EupIKOgl0NUyYgweA96zgiY5O1BTx5SCdVkw6OuOuG4l7xd/Zd",
	"bM613bPw/TiGzmTSHofNzUCZs8GJNV6m/wetMebZy8f83RL8amuj9oRMtIM8JGJ2vPU8u1TTF99E35VP",
	"yr9GamWHD2uYX4034nqsD9fPJ/4318W/F+B/VYBJoMOth8+POIfxDH14ImCTQRHu4w46h/OaVrBCqdDD",
	"vaYV5KVGQ7dagTRq8xYw9xgHTL5yJfPu0hXXsF7/JdvR9PDda39I/Ip6798gll4auqV2Ou0DXWBZBqAV",
	"AlMHaJSz2hCQBYc+juX895KxwqVHhYa0LAMUpb0X2XbabdnIO4vRSTnkdiyPaydzhIBRFUIFyQFsAeyQ",
	"UkwhQAdoiYkmkncHkH30wrDDw/AG8Px7vS9CSvN2W6B9+OdxMCrXoEOoUXWYoiSF9Yy+5XvAKH5x2mO4",
	"1SPrLqKwuorqQqk/YyQ0rtULoA0EzK1RoVteG8Il+n+lWAsiCXcC8wKMJXAeAxrKOH6r39YK7tFj68ge",
	"PeveglDJNShdFOih8LYaXe9kjChGu90HR1vx9jq3X0M9GXvc99Yfr69vuK+fvnzMd0a2vRBHZwvTq8qd",
	"Bh9baGwpKZ3Y6Zvm7wAAAP//RccmhwcTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
